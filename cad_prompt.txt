Write a complete, self-contained Python script using FreeCAD’s Python API that builds a 3D model of a BEP-type shell-and-tube heat exchanger with the following parameters:\n\n- Tube Count: 56  \n- Tube Diameter: 10 mm  \n- Tube Pitch: 20 mm  \n- Tube Sheet Thickness: 5 mm  \n- Shell Internal Diameter: 200 mm  \n- Shell Wall Thickness: 5 mm  \n- Shell Length: 200 mm  \n\nThe script must perform these steps and be written to avoid common API and file-access errors:\n\n1. **Imports and Helper Functions:**  \n   - Import modules with:\n     ```\n     import FreeCAD, Part, math\n     from FreeCAD import Vector\n     ```\n   - Define a helper function `calculate_tube_position(i, j, tube_pitch)` that returns (x, y) for the tube’s center using a center-aligned triangular (staggered) 8-row by 7-column grid:\n     - For each row index i (0 to 7) and column index j (0 to 6), set:\n       - `y = (i - 7/2) * (tube_pitch * math.sqrt(3)/2)`\n       - `x = (j - 6/2) * tube_pitch` plus an offset of `(tube_pitch/2)` if i is odd.\n     - Ensure this function is defined before it is used.\n\n2. **Parameter Setup and Derived Quantities:**  \n   - Declare key parameters (tube count, dimensions, etc.).\n   - Compute:\n     - **Shell Outer Radius:** = (Shell Internal Diameter + 2×Shell Wall Thickness) / 2.\n     - **Effective Tube Length:** = Shell Length – 2×Tube Sheet Thickness.\n     - **Baffle Parameters:**  \n       - Baffle Thickness (e.g., 3 mm).  \n       - Number of Baffles (choose a value such that they are evenly distributed along the Effective Tube Length).  \n       - Baffle Spacing (center-to-center distance along the Effective Tube Length).  \n       - Baffle Cut Percent: 12.56% (this means a chord cut whose linear measure is 12.56% of the baffle diameter).\n\n3. **Outer Shell Creation:**  \n   - Create an outer cylindrical solid using `Part.makeCylinder(outer_radius, Shell_Length)`.\n   - Create an inner cylinder with radius = Shell Internal Diameter / 2 and the same height.\n   - Use the `.cut()` method to subtract the inner cylinder from the outer cylinder to form a hollow shell.\n\n4. **Tube Sheets:**  \n   - Create two disc-like solids for the top and bottom tube sheets at z = 0 and z = (Shell Length – Tube Sheet Thickness), respectively.\n   - Each tube sheet should have thickness = Tube Sheet Thickness and a radius = Shell Internal Diameter / 2.\n   - Loop over each tube position (using your `calculate_tube_position` function) and create a corresponding small cylinder (with diameter = Tube Diameter and height at least equal to Tube Sheet Thickness).  \n   - Subtract all these tube-hole cylinders from each tube sheet using the `.cut()` method.\n\n5. **Tube Bundle Creation:**  \n   - For each tube (using the same positions computed before), create a cylinder representing the tube:\n     - Use diameter = Tube Diameter and height = Effective Tube Length.\n     - Position each tube so that its bottom aligns with the top of the lower tube sheet (z = Tube Sheet Thickness).\n   - Store these tubes (or combine them using appropriate boolean fusion if desired).\n\n6. **Baffle Plates with Chord Cut:**  \n   - Evenly position baffle plates along the Effective Tube Length (between the two tube sheets) using the defined baffle spacing.\n   - For each baffle:\n     - Create a circular disc (using `Part.makeCylinder`) with diameter equal to Shell Internal Diameter and with height = Baffle Thickness.\n     - Subtract from this disc the cylindrical volumes corresponding to the tube positions (similar to the tube sheets) so that tubes pass through.\n     - Implement the segmental (chord) cut as follows:\n       - Compute the chord length as 12.56% of the baffle diameter.\n       - Instead of using functions like `Part.makeWedge` or `Part.makePrism` (which may require many arguments and cause errors), create a cutting solid (for example, a properly positioned box made with `Part.makeBox`) that covers the region of the chord to be removed.\n       - Subtract this cutting solid from the baffle to produce the required opening.  \n     - Ensure the chord (bypass opening) is consistently placed (e.g., at the top edge of each baffle).\n\n7. **Assembly and Object Creation:**  \n   - Create a new FreeCAD document (e.g., `doc = FreeCAD.newDocument(\"HeatExchanger\")`).\n   - For each major component (outer shell, top tube sheet, bottom tube sheet, tube bundle, and each baffle), add an object to the document using:\n     ```\n     obj = doc.addObject(\"Part::Feature\", \"ComponentName\")\n     obj.Shape = <shape_created_for_component>\n     ```\n     This avoids type errors associated with groups or compounds.\n   - After all objects are added, recompute the document with `doc.recompute()`.\n\n8. **Saving the Document (Optional):**  \n   - If file-save errors occur due to permission or path issues, either wrap the save call in a try/except block or comment it out. For example:\n     ```\n     try:\n         doc.saveAs(\"Shell_and_Tube_HeatExchanger.FCStd\")\n     except Exception as e:\n         FreeCAD.Console.PrintError(\"Failed to save document: \" + str(e))\n     ```\n   - This step is optional if file saving is problematic.\n\nAdditional Requirements:\n- Ensure all functions and variable names (e.g., `calculate_tube_position`) are defined and available before use.\n- Use only the functions available in the FreeCAD Part module (e.g., use `Part.makeCylinder`, `Part.makeBox`, and boolean operations like `.cut()` and `.fuse()`).\n- Avoid using undocumented or non-existent functions such as `Part.makeWedge`, `Part.makePrism`, or `Part.makeChord` that have caused errors.\n- Do not attempt to add objects to the document with types like \"Part::Group\" that are not accepted; use \"Part::Feature\" for each component.\n- Use only five arguments for functions like `Part.makeCylinder` (the position, height, and direction must conform to the FreeCAD API documentation).\n\nInclude no additional commentary in the final script—only the code implementing the geometry following these guidelines